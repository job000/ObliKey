name: CD Pipeline - Deployment

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.oblikey.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: https://api-staging.oblikey.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            oblikey/app:staging
            oblikey/app:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Railway (Staging)
        if: secrets.RAILWAY_TOKEN != ''
        run: |
          npm install -g @railway/cli
          railway up --service backend --environment staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run database migrations
        run: |
          npx prisma migrate deploy
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: custom
          custom_payload: |
            {
              text: "‚úÖ Staging deployment successful!",
              attachments: [{
                color: 'good',
                text: `Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nEnvironment: Staging`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ùå Staging deployment failed!",
              attachments: [{
                color: 'danger',
                text: `Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nEnvironment: Staging`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://oblikey.com
    needs: []

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci --production

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: https://api.oblikey.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            oblikey/app:latest
            oblikey/app:production
            oblikey/app:${{ steps.get_version.outputs.VERSION || 'manual' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Railway (Production)
        if: secrets.RAILWAY_TOKEN != ''
        run: |
          npm install -g @railway/cli
          railway up --service backend --environment production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to AWS ECS (if configured)
        if: secrets.AWS_ACCESS_KEY_ID != ''
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: oblikey-service
          cluster: oblikey-cluster
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          npx prisma migrate deploy
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Create Sentry release
        if: secrets.SENTRY_AUTH_TOKEN != ''
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: oblikey
        with:
          environment: production
          version: ${{ steps.get_version.outputs.VERSION || github.sha }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: custom
          custom_payload: |
            {
              text: "üöÄ Production deployment successful!",
              attachments: [{
                color: 'good',
                text: `Version: ${{ steps.get_version.outputs.VERSION || github.sha }}\nAuthor: ${{ github.actor }}\nEnvironment: Production`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: custom
          custom_payload: |
            {
              text: "üö® Production deployment failed!",
              attachments: [{
                color: 'danger',
                text: `Version: ${{ steps.get_version.outputs.VERSION || github.sha }}\nAuthor: ${{ github.actor }}\nEnvironment: Production`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

  # Smoke Tests (Post-Deployment)
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run smoke tests
        run: |
          # Health check
          curl -f https://api-staging.oblikey.com/health || exit 1

          # Basic API tests
          response=$(curl -s https://api-staging.oblikey.com/health)
          if [[ $response != *"OK"* ]]; then
            echo "Health check failed"
            exit 1
          fi

          echo "‚úÖ All smoke tests passed"

      - name: Notify smoke test results
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ö†Ô∏è Smoke tests failed after deployment!",
              attachments: [{
                color: 'warning',
                text: `Please investigate immediately.`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
