name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests and Build
  backend:
    name: Backend - Test & Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: oblikey_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/oblikey_test

      - name: Run database migrations
        working-directory: backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/oblikey_test

      - name: Run linter
        working-directory: backend
        run: npm run lint

      - name: Run tests with coverage
        working-directory: backend
        run: npm test -- --coverage --maxWorkers=2
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/oblikey_test
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist/

  # Frontend Tests and Build
  frontend:
    name: Frontend - Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linter
        working-directory: frontend
        run: npm run lint || true  # Don't fail on lint warnings for now

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: https://api.oblikey.com

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for vulnerabilities in backend dependencies
        working-directory: backend
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities in frontend dependencies
        working-directory: frontend
        run: npm audit --audit-level=high

  # Docker Build
  docker:
    name: Docker - Build & Test
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: oblikey/app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Code Quality
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Check TypeScript types (backend)
        working-directory: backend
        run: npx tsc --noEmit

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Check TypeScript types (frontend)
        working-directory: frontend
        run: npx tsc --noEmit

  # All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [backend, frontend, security, docker, code-quality]
    if: always()

    steps:
      - name: Check if all jobs succeeded
        run: |
          if [ "${{ needs.backend.result }}" != "success" ]; then
            echo "Backend checks failed"
            exit 1
          fi
          if [ "${{ needs.frontend.result }}" != "success" ]; then
            echo "Frontend checks failed"
            exit 1
          fi
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "Security checks failed"
            exit 1
          fi
          if [ "${{ needs.docker.result }}" != "success" ]; then
            echo "Docker build failed"
            exit 1
          fi
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "Code quality checks failed"
            exit 1
          fi
          echo "âœ… All checks passed successfully!"
