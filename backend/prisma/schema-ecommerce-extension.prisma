// E-commerce Extension Models for ObliKey
// Add these models to the main schema.prisma file

// ============================================
// PRODUCT CATEGORIES (Hierarchical)
// ============================================

model ProductCategory {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  slug        String
  description String?
  imageUrl    String?
  parentId    String?  // For hierarchical categories (subcategories)
  sortOrder   Int      @default(0)
  active      Boolean  @default(true)
  metadata    Json?    // For custom fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parent   ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ProductCategory[] @relation("CategoryHierarchy")
  products ProductCategoryMapping[]

  @@unique([tenantId, slug])
  @@index([tenantId, active])
  @@index([parentId])
  @@map("product_categories")
}

// Many-to-many relationship between products and categories
model ProductCategoryMapping {
  id         String   @id @default(uuid())
  productId  String
  categoryId String
  isPrimary  Boolean  @default(false) // One category can be primary
  createdAt  DateTime @default(now())

  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  category ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@map("product_category_mappings")
}

// ============================================
// PRODUCT VARIANTS (Size, Color, etc.)
// ============================================

model ProductVariant {
  id              String   @id @default(uuid())
  productId       String
  name            String   // e.g., "Small - Red", "Medium - Blue"
  sku             String?  @unique
  price           Float?   // Overrides base product price if set
  compareAtPrice  Float?
  stock           Int?     @default(0)
  trackInventory  Boolean  @default(true)
  weight          Float?   // For shipping calculations
  imageUrl        String?  // Variant-specific image
  sortOrder       Int      @default(0)
  active          Boolean  @default(true)
  metadata        Json?    // Additional variant data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product         Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues ProductVariantAttribute[]
  orderItems      OrderItemVariant[]
  cartItems       CartItemVariant[]

  @@index([productId])
  @@index([productId, active])
  @@map("product_variants")
}

// Attributes that define variants (e.g., Size, Color)
model ProductAttribute {
  id        String   @id @default(uuid())
  tenantId  String
  name      String   // e.g., "Size", "Color", "Material"
  slug      String   // e.g., "size", "color", "material"
  type      String   @default("SELECT") // SELECT, COLOR, TEXT
  sortOrder Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  values ProductAttributeValue[]

  @@unique([tenantId, slug])
  @@index([tenantId])
  @@map("product_attributes")
}

// Attribute values (e.g., "Small", "Medium", "Red", "Blue")
model ProductAttributeValue {
  id          String   @id @default(uuid())
  attributeId String
  value       String   // e.g., "Small", "Red"
  displayName String?  // Optional display name
  colorCode   String?  // For color attributes (#FF0000)
  sortOrder   Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attribute ProductAttribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variants  ProductVariantAttribute[]

  @@index([attributeId])
  @@map("product_attribute_values")
}

// Links variants to their attribute values
model ProductVariantAttribute {
  id               String   @id @default(uuid())
  variantId        String
  attributeValueId String
  createdAt        DateTime @default(now())

  variant        ProductVariant        @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attributeValue ProductAttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeValueId])
  @@index([variantId])
  @@map("product_variant_attributes")
}

// ============================================
// PRODUCT REVIEWS & RATINGS
// ============================================

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

model ProductReview {
  id          String       @id @default(uuid())
  tenantId    String
  productId   String
  userId      String
  rating      Int          // 1-5 stars
  title       String?
  comment     String
  status      ReviewStatus @default(PENDING)
  verified    Boolean      @default(false) // Verified purchase
  helpful     Int          @default(0)      // Helpful votes
  notHelpful  Int          @default(0)      // Not helpful votes
  moderatedBy String?
  moderatedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderator User?  @relation("ModeratedReviews", fields: [moderatedBy], references: [id])

  @@unique([productId, userId]) // One review per user per product
  @@index([tenantId, productId])
  @@index([userId])
  @@index([status])
  @@map("product_reviews")
}

// ============================================
// WISHLIST
// ============================================

model Wishlist {
  id        String   @id @default(uuid())
  tenantId  String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]

  @@index([tenantId])
  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  variantId  String?  // Optional specific variant
  notes      String?
  createdAt  DateTime @default(now())

  wishlist Wishlist        @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant  ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([wishlistId, productId, variantId])
  @@index([wishlistId])
  @@index([productId])
  @@map("wishlist_items")
}

// ============================================
// DISCOUNT CODES & COUPONS
// ============================================

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

model DiscountCode {
  id               String       @id @default(uuid())
  tenantId         String
  code             String       // e.g., "SUMMER2025"
  type             DiscountType
  value            Float        // Percentage (0-100) or fixed amount
  minOrderAmount   Float?       // Minimum order to apply
  maxDiscountAmount Float?      // Max discount cap
  usageLimit       Int?         // Total usage limit
  usageCount       Int          @default(0)
  perUserLimit     Int?         // Limit per user
  startDate        DateTime
  endDate          DateTime?
  active           Boolean      @default(true)
  description      String?

  // Product/Category restrictions
  applicableToAll  Boolean      @default(true)
  categoryIds      String[]     // Array of category IDs
  productIds       String[]     // Array of product IDs

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  tenant Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders OrderDiscount[]
  usages DiscountCodeUsage[]

  @@unique([tenantId, code])
  @@index([tenantId, active])
  @@index([code])
  @@map("discount_codes")
}

model DiscountCodeUsage {
  id         String   @id @default(uuid())
  codeId     String
  userId     String
  orderId    String
  usedAt     DateTime @default(now())

  code  DiscountCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([codeId])
  @@index([userId])
  @@map("discount_code_usages")
}

// Link between orders and discount codes
model OrderDiscount {
  id             String   @id @default(uuid())
  orderId        String
  discountCodeId String
  discountAmount Float
  createdAt      DateTime @default(now())

  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discountCode DiscountCode @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_discounts")
}

// ============================================
// ENHANCED CART & ORDER ITEMS WITH VARIANTS
// ============================================

model CartItemVariant {
  id         String   @id @default(uuid())
  cartItemId String   @unique
  variantId  String
  createdAt  DateTime @default(now())

  cartItem CartItem       @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  variant  ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([cartItemId])
  @@index([variantId])
  @@map("cart_item_variants")
}

model OrderItemVariant {
  id          String   @id @default(uuid())
  orderItemId String   @unique
  variantId   String
  variantName String   // Snapshot at purchase time
  variantSku  String?
  createdAt   DateTime @default(now())

  orderItem OrderItem      @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([orderItemId])
  @@map("order_item_variants")
}

// ============================================
// GUEST CHECKOUT
// ============================================

model GuestCheckout {
  id            String   @id @default(uuid())
  tenantId      String
  email         String
  firstName     String
  lastName      String
  phone         String?
  sessionId     String   @unique // Browser session ID
  orderId       String?  @unique // Created order reference

  // Delivery info
  address       String?
  city          String?
  zip           String?
  country       String   @default("Norway")

  convertedToUser Boolean  @default(false)
  userId          String?  // If guest converts to user

  createdAt     DateTime @default(now())
  expiresAt     DateTime // Session expiry (e.g., 24 hours)

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order  Order? @relation(fields: [orderId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([email])
  @@index([sessionId])
  @@map("guest_checkouts")
}

// ============================================
// PRODUCT SPECIFICATIONS
// ============================================

model ProductSpecification {
  id        String   @id @default(uuid())
  productId String
  name      String   // e.g., "Dimensions", "Weight", "Material"
  value     String   // e.g., "10x20x30 cm", "2.5 kg", "Cotton"
  sortOrder Int      @default(0)
  group     String?  // Optional grouping (e.g., "Physical", "Technical")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_specifications")
}

// ============================================
// RELATED PRODUCTS
// ============================================

model RelatedProduct {
  id               String   @id @default(uuid())
  productId        String
  relatedProductId String
  type             String   @default("RELATED") // RELATED, UPSELL, CROSS_SELL
  sortOrder        Int      @default(0)
  createdAt        DateTime @default(now())

  product        Product @relation("ProductRelations", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct Product @relation("RelatedToProducts", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId, type])
  @@index([productId])
  @@map("related_products")
}

// ============================================
// PRODUCT COLLECTIONS (Featured, New, etc.)
// ============================================

model ProductCollection {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  slug        String
  description String?
  imageUrl    String?
  type        String   @default("MANUAL") // MANUAL, AUTO
  conditions  Json?    // For automatic collections
  sortOrder   Int      @default(0)
  active      Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products ProductCollectionMapping[]

  @@unique([tenantId, slug])
  @@index([tenantId, active])
  @@map("product_collections")
}

model ProductCollectionMapping {
  id           String   @id @default(uuid())
  collectionId String
  productId    String
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())

  collection ProductCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([collectionId, productId])
  @@index([collectionId])
  @@index([productId])
  @@map("product_collection_mappings")
}
